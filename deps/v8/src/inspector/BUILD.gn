# Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("../../gni/v8.gni")

_inspector_protocol = "//third_party/WebKit/Source/platform/inspector_protocol"
import("$_inspector_protocol/inspector_protocol.gni")

_protocol_generated = [
  "protocol/Forward.h",
  "protocol/Protocol.cpp",
  "protocol/Protocol.h",
  "protocol/Console.cpp",
  "protocol/Console.h",
  "protocol/Debugger.cpp",
  "protocol/Debugger.h",
  "protocol/HeapProfiler.cpp",
  "protocol/HeapProfiler.h",
  "protocol/Profiler.cpp",
  "protocol/Profiler.h",
  "protocol/Runtime.cpp",
  "protocol/Runtime.h",
  "protocol/Schema.cpp",
  "protocol/Schema.h",
  "../../include/inspector/Debugger.h",
  "../../include/inspector/Runtime.h",
  "../../include/inspector/Schema.h",
]

action("protocol_compatibility") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  script = "$_inspector_protocol/CheckProtocolCompatibility.py"
  inputs = [
    "js_protocol.json",
  ]
  _stamp = "$target_gen_dir/js_protocol.stamp"
  outputs = [
    _stamp,
  ]
  args = [
    "--stamp",
    rebase_path(_stamp, root_build_dir),
    rebase_path("js_protocol.json", root_build_dir),
  ]
}

inspector_protocol_generate("protocol_generated_sources") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  deps = [
    ":protocol_compatibility",
  ]

  out_dir = target_gen_dir
  config_file = "inspector_protocol_config.json"
  inputs = [
    "js_protocol.json",
    "inspector_protocol_config.json",
  ]
  outputs = _protocol_generated
}

action("inspector_injected_script") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  script = "build/xxd.py"
  inputs = [
    "InjectedScriptSource.js",
  ]
  outputs = [
    "$target_gen_dir/InjectedScriptSource.h",
  ]
  args = [
    "InjectedScriptSource_js",
    rebase_path("InjectedScriptSource.js", root_build_dir),
    rebase_path("$target_gen_dir/InjectedScriptSource.h", root_build_dir),
  ]
}

action("inspector_debugger_script") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  script = "build/xxd.py"
  inputs = [
    "DebuggerScript.js",
  ]
  outputs = [
    "$target_gen_dir/DebuggerScript.h",
  ]
  args = [
    "DebuggerScript_js",
    rebase_path("DebuggerScript.js", root_build_dir),
    rebase_path("$target_gen_dir/DebuggerScript.h", root_build_dir),
  ]
}

config("inspector_config") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  cflags = []
  if (is_win) {
    cflags += [
      "/wd4267",  # Truncation from size_t to int.
      "/wd4305",  # Truncation from 'type1' to 'type2'.
      "/wd4324",  # Struct padded due to declspec(align).
      "/wd4714",  # Function marked forceinline not inlined.
      "/wd4800",  # Value forced to bool.
      "/wd4996",  # Deprecated function call.
    ]
  }
  if (is_component_build) {
    defines = [
      "V8_SHARED",
      "BUILDING_V8_SHARED",
    ]
  }
}

v8_source_set("inspector") {
  deps = [
    ":inspector_debugger_script",
    ":inspector_injected_script",
    ":protocol_generated_sources",
  ]
  configs = [ ":inspector_config" ]
  include_dirs = [
    "../..",
    "../../include",
    "$target_gen_dir/../..",
    "$target_gen_dir/../../include",
  ]
  sources = rebase_path(_protocol_generated, ".", target_gen_dir)
  sources += [
    "../../include/v8-inspector-protocol.h",
    "../../include/v8-inspector.h",
  ]
  sources += get_target_outputs(":inspector_injected_script")
  sources += get_target_outputs(":inspector_debugger_script")
  sources += [
    "Allocator.h",
    "InjectedScript.cpp",
    "InjectedScript.h",
    "InjectedScriptNative.cpp",
    "InjectedScriptNative.h",
    "InspectedContext.cpp",
    "InspectedContext.h",
    "JavaScriptCallFrame.cpp",
    "JavaScriptCallFrame.h",
    "ProtocolPlatform.h",
    "RemoteObjectId.cpp",
    "RemoteObjectId.h",
    "ScriptBreakpoint.h",
    "SearchUtil.cpp",
    "SearchUtil.h",
    "String16.cpp",
    "String16.h",
    "StringUtil.cpp",
    "StringUtil.h",
    "V8Console.cpp",
    "V8Console.h",
    "V8ConsoleAgentImpl.cpp",
    "V8ConsoleAgentImpl.h",
    "V8ConsoleMessage.cpp",
    "V8ConsoleMessage.h",
    "V8Debugger.cpp",
    "V8Debugger.h",
    "V8DebuggerAgentImpl.cpp",
    "V8DebuggerAgentImpl.h",
    "V8DebuggerScript.cpp",
    "V8DebuggerScript.h",
    "V8FunctionCall.cpp",
    "V8FunctionCall.h",
    "V8HeapProfilerAgentImpl.cpp",
    "V8HeapProfilerAgentImpl.h",
    "V8InjectedScriptHost.cpp",
    "V8InjectedScriptHost.h",
    "V8InspectorImpl.cpp",
    "V8InspectorImpl.h",
    "V8InspectorSessionImpl.cpp",
    "V8InspectorSessionImpl.h",
    "V8InternalValueType.cpp",
    "V8InternalValueType.h",
    "V8ProfilerAgentImpl.cpp",
    "V8ProfilerAgentImpl.h",
    "V8Regex.cpp",
    "V8Regex.h",
    "V8RuntimeAgentImpl.cpp",
    "V8RuntimeAgentImpl.h",
    "V8SchemaAgentImpl.cpp",
    "V8SchemaAgentImpl.h",
    "V8StackTraceImpl.cpp",
    "V8StackTraceImpl.h",
    "V8ValueCopier.cpp",
    "V8ValueCopier.h",
  ]
}
